services:
  # Development environment
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - PORT=3000
    networks:
      - ai-pets-network
    profiles:
      - dev

  # Production environment
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    networks:
      - ai-pets-network
    profiles:
      - prod
    restart: unless-stopped

  # Testing environment
  app-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
    environment:
      - NODE_ENV=test
      - CI=true
    networks:
      - ai-pets-network
    profiles:
      - test

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app-prod
    networks:
      - ai-pets-network
    profiles:
      - prod
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ai-pets-network
    profiles:
      - prod
      - dev
    restart: unless-stopped

  # PostgreSQL for game data (optional)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ai_pets_adventure
      POSTGRES_USER: aipets
      POSTGRES_PASSWORD: aipets_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - ai-pets-network
    profiles:
      - prod
      - dev
    restart: unless-stopped

networks:
  ai-pets-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data: 